name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    if: github.event_name == 'push'
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce CI load by testing beta only on Ubuntu
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose --all-features

    - name: Run tests
      run: cargo test --verbose --all-features --jobs 2
      env:
        RUST_TEST_THREADS: 1

    - name: Test documentation
      run: cargo doc --no-deps --all-features

  msrv:
    if: github.event_name == 'push'
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust MSRV
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.82.0
    - name: Check MSRV
      run: cargo check --all-features

  security:
    if: github.event_name == 'push'
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
    - name: Install cargo-deny
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-deny@0.16.1
    - name: Run cargo-deny advisories
      run: cargo deny check advisories

  coverage:
    if: github.event_name == 'push'
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-coverage-
          ${{ runner.os }}-cargo-

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info --jobs 2 -- --test-threads=1

    - name: Upload coverage to Codecov
      if: ${{ secrets.CODECOV_TOKEN != '' }}
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  test-pr:
    if: github.event_name == 'pull_request'
    name: Test Suite (PR - ubuntu, stable)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt, clippy
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-stable-
          ${{ runner.os }}-cargo-
    - name: Check formatting
      run: cargo fmt --all -- --check
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    - name: Build
      run: cargo build --verbose --all-features
    - name: Run tests (serialized)
      run: cargo test --verbose --all-features --jobs 2
      env:
        RUST_TEST_THREADS: 1
